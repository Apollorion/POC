#!/bin/bash
set -e

# Source common library functions
source "$(dirname "$0")/lib/common.sh"

# Function to collect GitHub credentials and create tfvars file
setup_github_credentials() {
    print_status "Setting up GitHub integration for S3 bucket blueprints..."
    
    # Ensure we're in the project root directory
    cd "$(dirname "$0")/.."
    
    local tfvars_file="spacelift-config/terraform.tfvars"
    
    # Check if tfvars file already exists
    if [ -f "$tfvars_file" ]; then
        print_warning "terraform.tfvars already exists in spacelift-config/"
        echo -n "Do you want to update it? (y/N): "
        read -r update_choice
        if [[ ! "$update_choice" =~ ^[Yy]$ ]]; then
            print_status "Skipping GitHub credentials setup"
            return 0
        fi
    fi
    
    echo ""
    echo "For the S3 bucket blueprint to work, we need GitHub credentials to commit"
    echo "generated Terraform files back to your repository."
    echo ""
    
    # Prompt for GitHub organization
    echo -n "Enter your GitHub organization (default: spacelift-solutions): "
    read -r github_org
    github_org=${github_org:-spacelift-solutions}
    
    # Prompt for GitHub personal access token
    echo ""
    echo "Enter your GitHub Personal Access Token with 'repo' permissions:"
    echo "(This will be stored locally in terraform.tfvars - already in .gitignore)"
    echo -n "GitHub PAT: "
    read -r -s github_token
    echo ""
    
    # Validate token is not empty
    if [ -z "$github_token" ]; then
        print_warning "No GitHub token provided. Skipping GitHub integration setup."
        print_warning "You can manually create spacelift-config/terraform.tfvars later with:"
        print_warning "github_organization = \"your-org\""
        print_warning "github_token = \"your-token\""
        return 0
    fi
    
    # Create tfvars file
    print_status "Creating terraform.tfvars file..."
    cat > "$tfvars_file" << EOF
# GitHub integration variables for S3 bucket blueprints
# This file is automatically generated by setup-github-credentials.sh and is ignored by git

github_organization = "$github_org"
github_token = "$github_token"
EOF
    
    # Set restrictive permissions on the tfvars file
    chmod 600 "$tfvars_file"
    
    print_success "✓ GitHub credentials configured in $tfvars_file"
    print_success "✓ File permissions set to 600 (owner read/write only)"
    echo ""
}

# Run the function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    setup_github_credentials
fi